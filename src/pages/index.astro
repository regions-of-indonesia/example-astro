---
import Label from "./../components/Label.astro";
import Select from "./../components/Select.astro";

import "./../styles/globals.css";
---

<html lang="en" data-theme="dark">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Example Astro</title>
  </head>
  <body>
    <div class="container max-w-screen-lg mx-auto p-4 md:p-6 lg:p-8 xl:p-10">
      <h1 class="mb-4 lg:mb-6 text-center text-lg md:text-xl 2xl:text-2xl font-mono font-bold">Regions of Indonesia</h1>

      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-3 lg:gap-4">
        <div class="flex flex-col gap-1">
          <Label for="select-provinces">Provinces</Label>
          <Select id="select-provinces">
            <option disabled selected>Select...</option>
          </Select>
        </div>
        <div class="flex flex-col gap-1">
          <Label for="select-districts">Districts</Label>
          <Select id="select-districts">
            <option disabled selected>Select...</option>
          </Select>
        </div>
        <div class="flex flex-col gap-1">
          <Label for="select-subdistricts">Subdistricts</Label>
          <Select id="select-subdistricts">
            <option disabled selected>Select...</option>
          </Select>
        </div>
        <div class="flex flex-col gap-1">
          <Label for="select-villages">Villages</Label>
          <Select id="select-villages">
            <option disabled selected>Select...</option>
          </Select>
        </div>
      </div>
    </div>
  </body>
</html>

<script>
  import { create, cache } from "@regions-of-indonesia/client";
  import { isRegionCode } from "@regions-of-indonesia/utils";
  import type { Region } from "@regions-of-indonesia/types";

  const client = create({
    middlewares: [cache()],
  });

  const parseRegionCode = (value: unknown) => {
    if (value && isRegionCode(value)) return value;
    throw new Error("Invalid region code");
  };

  const elProvincesSelect = document.getElementById("select-provinces") as HTMLSelectElement;
  const elDistrictsSelect = document.getElementById("select-districts") as HTMLSelectElement;
  const elSubdistrictsSelect = document.getElementById("select-subdistricts") as HTMLSelectElement;
  const elVillaegsSelect = document.getElementById("select-villages") as HTMLSelectElement;

  const regionsToOptionsMapFn = ({ code, name }: Region) => {
    const element = document.createElement("option");
    element.setAttribute("value", code);
    element.appendChild(document.createTextNode(name));
    return element;
  };
  const regionsToOptions = (regions: Region[]) => regions.map(regionsToOptionsMapFn);

  const replaceSelectOptions = (select: HTMLSelectElement, options: HTMLOptionElement[]) => {
    while (select.options.length > 1) select.remove(1);
    for (const option of options) select.options.add(option);
  };

  const mount = async () => {
    try {
      replaceSelectOptions(elProvincesSelect, regionsToOptions(await client.province.find()));
    } catch (error) {
      console.error(error);
      replaceSelectOptions(elProvincesSelect, []);
    }
  };

  mount();

  const listen = (select1: HTMLSelectElement, select2: HTMLSelectElement, region: "district" | "subdistrict" | "village") => {
    select1.addEventListener("change", async () => {
      try {
        select2.dispatchEvent(new Event("change"));
        select2.selectedIndex = 0;
        replaceSelectOptions(select2, regionsToOptions(await client[region].find(parseRegionCode(select1.value))));
      } catch (error) {
        console.error(error);
        replaceSelectOptions(select2, []);
      }
    });
  };

  listen(elProvincesSelect, elDistrictsSelect, "district");
  listen(elDistrictsSelect, elSubdistrictsSelect, "subdistrict");
  listen(elSubdistrictsSelect, elVillaegsSelect, "village");
</script>
